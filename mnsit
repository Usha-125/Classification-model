#imports
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Flatten
from keras.utils import to_categorical
from keras.datasets import mnist
import matplotlib.pyplot as plt

# Load the Data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
print(x_train.dtype)
print(x_train.shape)
print(y_test.shape)
print(x_train[0])
plt.imshow(x_train[0], cmap='gray')
plt.title(f"Label: {y_train[0]}")
plt.show()

# Normalize
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# to_categorical (one-hot encoding)
print(f"Before : label is : {y_train[0]}")
y_train = to_categorical(y_train)
print(f"After : label is : {y_train[0]}")
y_test = to_categorical(y_test)

# Build model
model = Sequential()
model.add(Flatten(input_shape=(28, 28)))
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compile
model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train
result = model.fit(x_train, y_train, epochs=20, batch_size=64, validation_split=0.2)

# Evaluate
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test loss : {loss}")
print(f"Test accuracy : {accuracy}")

# Print history info
print(result.history.keys())
print(result.history.values())
print(result.history)

# Visualization
plt.figure(figsize=(10,5))
plt.plot(result.history['accuracy'], label="Train Accuracy")
plt.plot(result.history['val_accuracy'], label="Validation Accuracy")
plt.plot(result.history['loss'], label="Train Loss")
plt.plot(result.history['val_loss'], label="Validation Loss")
plt.title("Training and Validation Performance")
plt.xlabel("Epochs")
plt.ylabel("Value")
plt.legend()
plt.show()
